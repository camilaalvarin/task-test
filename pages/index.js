import Head from 'next/head'
import { useState, useEffect  } from 'react'
import { useRouter } from 'next/router'
import { collection, addDoc, getDocs, doc, updateDoc, deleteDoc } from 'firebase/firestore'
import { BsFillPencilFill, BsXLg } from "react-icons/bs";
import { FaPowerOff } from "react-icons/fa";
import { GrInProgress } from "react-icons/gr"; 
import { MdOutlineDone, MdOutlinePending } from "react-icons/md";


import { database } from '../firebaseConfig';

export default function Home() {

  let router = useRouter()
  const databaseRef = collection(database, 'camila')

  const [fireData, setFireData] = useState([]);
  const [isUpdate, setIsUpdate] = useState(false);
  const [ID, setID] = useState(null);
  const [task, setTask] = useState('');
  const [status, setStatus] = useState('');

  useEffect(() => {
    let token = sessionStorage.getItem('Token')
    if(token){
      getData()
    }
    if(!token) {
        router.push('/register')
    }
}, [])

const addData = () => {
    addDoc(databaseRef, {
      task: task,
      status: status
    })
    .then(() => {
      getData()
      setTask('')
      setStatus('')
    })
}

  const getData = async () => {
    await getDocs(databaseRef)
    .then((response) => {
      setFireData(response.docs.map((data) => {
        return {...data.data(), id: data.id}
      }))
    })
  }

  const getID = (id, task, status) => {
    setID(id)
    setTask(task)
    setStatus(status)
    setIsUpdate(true)
  }

  const updateFields = () => {
    let fieldToEdit = doc(database, 'camila', ID);
    console.log(ID)
    updateDoc(fieldToEdit, {
      task: task,
      status: status
    })
    .then(() => {
      setIsUpdate(false)
      setTask('')
      setStatus('')
      getData()
    })
    .catch((err) => {
      console.log(err)
    })
  }

  const deleteDocs = (id) => {
    let fieldToEdit = doc(database, 'camila', id);
    deleteDoc(fieldToEdit)
    .then(() => {
      getData()
    })
    .catch((err) => {
      console.log(err)
    })
  }

  function statusValue (e) {
    setStatus(e.target.value )
  }

  function taskValue (e) {
    setTask(e.target.value)
  }

  const logout = () => {
    sessionStorage.removeItem('Token')
    router.push('/register')
  }


  return (
    <div className='container'>
      <Head>
        <title>To do App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className='navTitle'>
        <p>TODO LIST</p>
        <button onClick={logout} className='powerOff' title='Log Out'><FaPowerOff /></button>
      </div>
      <div className='border'>
        <h2>TODO LIST</h2>
        <div className='flex'>
          <div className='taskList'>
            {fireData.map((data) => {
              return ( <div className='liDiv'> 
                  <div className='borderDiv'><li>{data.task}</li></div>
                    <div>
                      <button className='statusButton' title={data.status} 
                        style={data.status === 'Pending'? {color: 'red'} : data.status === 'Done'? {color: 'green'} : {color: 'black'}}>
                        {data.status === 'Pending'? <MdOutlinePending /> : data.status === 'Done'? <MdOutlineDone /> : data.status === 'In progress'?<GrInProgress/> : null}
                      </button>
                      <button className='xButton' onClick={() => {
                          getID(data.id, data.task, data.status)
                        }}>
                        <BsFillPencilFill /> 
                      </button>
                      <button className='xButton' onClick={() => {
                          deleteDocs(data.id)
                        }}>
                        <BsXLg />
                      </button>
                </div>
              </div>)
            })}
          </div>

          <div className='newTask'>
            <div>
              <input placeholder='New Todo' value={task}
                onChange={taskValue}
              >
              </input>
            </div> 
            <div>
              <select onChange={statusValue} value={status}>
                <option>Status (Pending / In progress / Done) âˆ¨</option>
                <option value='Pending' key='Pending'>Pending</option>
                <option value='In progress' key='In progress'>In progress</option>
                <option value='Done' key='Done'>Done</option>
              </select>
            </div>
            <div className='buttonsDiv'>
              {isUpdate ? (
                <button className='buttons' onClick={updateFields}>MODIFY</button>
              ) :
              (  
                <button className='buttons' onClick={addData}>ADD</button> 
              )}
            </div>
          </div>
        </div>

      </div>
      <style jsx>{`
          @import url('https://fonts.googleapis.com/css2?family=Poppins:wght@100&display=swap');
          .container {
            display: grid;
            justify-content: center;
          }

          .border {
            width: 861px;
            height: 400px;
            background-color: #ffb014;
            padding: 50px;
            margin-top: 150px;
          }
          .flex {
            display: flex;
            justify-content: center;
            align-items: center;
          }

          h2 {
            width: 200px;
            font-weight: bold;
            color: #333333;
            border-bottom: 2px solid white;
            padding-bottom: 15px;
            font-size: poppins;
          }

          .navTitle {
            position: absolute;
            width: 100%;
            padding: 10px;
            background-color: #333333;
            color: white;
            font-weight: bolder;
            display: flex;
            justify-content: space-between;
          }

          .navTitle p {
            margin-left: 120px;
          }
          .newTask {
            display: grid;
          }

          .taskList {
            max-width: 400px;
            max-height: 200px;
            overflow: hidden;
            overflow-y: scroll;
            margin-right: 60px;
          }

          .taskList::-webkit-scrollbar {
            width: 8px;     
            height: 8px;    
            display: none;  
        } 

          .borderDiv {
            height: fit-content;
            margin-top: 10px;
          }

          .liDiv {
            display: flex;
            justify-content: space-between;
            color: #333333;
            border-bottom: 2px solid white;
            width: 400px;
            height: 48px;
            padding-bottom: 7px;
          }

          .liDiv button{
            margin-left: 10px;
          }

          .buttons {
            padding: 8px;
            width: 100px;
            background-color: #333333;
            color: #ffb014;
            font-weight: bolder;
            border: 1px solid #333333;
            border-radius: 3px;
            cursor: pointer;
          }

          .buttons:hover {
            cursor: pointer;
            background-color: #ffb014;
            border: 2px solid #333333;
            color: #333333;
          }

          .xButton {
            width: 20px;
            background-color: #ffb014;
            color: #333333;
            font-weight: bold;
            border: 0px;
            margin-right: 10px;
            cursor: pointer;
            font-size: 20px;
            margin-top: 15px;
          }

          .statusButton {
            width: 20px;
            background-color: #ffb014;
            color: #333333;
            font-weight: bold;
            border: 0px;
            margin-right: 10px;
            cursor: pointer;
            font-size: 20px;
            margin-top: 15px;
            margin-right: 35px;
          }

          input {
            background-color: #ffb014;
            border: none;
            color: #333333;
            width: 300px;
            border-bottom: 2px solid white;
            padding: 10px;
          }

          input::-webkit-input-placeholder {
            color: #333333;
        }

          *:focus {
            outline: none;
        }

          select {
            background-color: #ffb014;
            border: none;
            color: #333333;
            width: 300px;
            border-bottom: 2px solid white;
            padding: 10px;
            margin-top: 15px;
            outline: none;
            
            appearance: none;
            -webkit-appearance: none;
            -moz-appearance: none;
          }

          .buttonsDiv {
            display: grid;
            justify-self: end;
            margin-top: 20px;
            height: 20px;
          }
          
          .powerOff {
            background-color: transparent;
            border: none;
            color: white;
            font-size: 25px;
            cursor: pointer;
          }

          @media only screen and (max-width: 900px) {
            .flex {
              flex-direction: column;
            }

            .newTask {
              margin-top: 50px;
            }
          }
    `}</style>
    </div>

  )
}
